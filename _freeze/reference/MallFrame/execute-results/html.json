{
  "hash": "216838d4140dcc3a6fd654fe2973fc43",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: MallFrame\n---\n\n\n\n``` python\nMallFrame(df)\n```\n\nExtension to Polars that add ability to use an LLM to run batch predictions over a data frame\n\nWe will start by loading the needed libraries, and set up the data frame that will be used in the examples:\n\n\n::: {#48b6d6f6 .cell execution_count=1}\n``` {.python .cell-code}\nimport mall\nimport polars as pl\npl.Config(fmt_str_lengths=100)\npl.Config.set_tbl_hide_dataframe_shape(True)\npl.Config.set_tbl_hide_column_data_types(True)\ndata = mall.MallData\nreviews = data.reviews\nreviews.llm.use(\"ollama\", model =  \"llama3.2\")\n```\n:::\n\n\n## Methods\n\n| Name | Description |\n|------------------------------------|------------------------------------|\n| [classify](#mall.MallFrame.classify) | Classify text into specific categories. |\n| [custom](#mall.MallFrame.custom) | Provide the full prompt that the LLM will process. |\n| [extract](#mall.MallFrame.extract) | Pull a specific label from the text. |\n| [sentiment](#mall.MallFrame.sentiment) | Use an LLM to run a sentiment analysis |\n| [summarize](#mall.MallFrame.summarize) | Summarize the text down to a specific number of words. |\n| [translate](#mall.MallFrame.translate) | Translate text into another language. |\n| [use](#mall.MallFrame.use) | Define the model, backend, and other options to use to |\n| [verify](#mall.MallFrame.verify) | Check to see if something is true about the text. |\n\n### classify {#mall.MallFrame.classify}\n\n``` python\nMallFrame.classify(col, labels='', additional='', pred_name='classify')\n```\n\nClassify text into specific categories.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name | Type | Description | Default |\n|---------|---------|---------------------------------------------|---------|\n| col | str | The name of the text field to process | *required* |\n| labels | list | A list or a DICT object that defines the categories to classify the text as. It will return one of the provided labels. | `''` |\n| pred_name | str | A character vector with the name of the new column where the prediction will be placed | `'classify'` |\n| additional | str | Inserts this text into the prompt sent to the LLM | `''` |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#3e0a8e0d .cell execution_count=2}\n``` {.python .cell-code}\nreviews.llm.classify(\"review\", [\"appliance\", \"computer\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>classify</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;computer&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;computer&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;computer&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#2bdcd379 .cell execution_count=3}\n``` {.python .cell-code}\n# Use 'pred_name' to customize the new column's name\nreviews.llm.classify(\"review\", [\"appliance\", \"computer\"], pred_name=\"prod_type\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>prod_type</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;computer&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;computer&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;computer&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#5fb178fc .cell execution_count=4}\n``` {.python .cell-code}\n#Pass a DICT to set custom values for each classification\nreviews.llm.classify(\"review\", {\"appliance\" : \"1\", \"computer\" : \"2\"})\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>classify</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;1&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;2&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;1&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### custom {#mall.MallFrame.custom}\n\n``` python\nMallFrame.custom(col, prompt='', valid_resps='', pred_name='custom')\n```\n\nProvide the full prompt that the LLM will process.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name | Type | Description | Default |\n|----------|----------|-------------------------------------------|----------|\n| col | str | The name of the text field to process | *required* |\n| prompt | str | The prompt to send to the LLM along with the `col` | `''` |\n| pred_name | str | A character vector with the name of the new column where the prediction will be placed | `'custom'` |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#920e69ef .cell execution_count=5}\n``` {.python .cell-code}\nmy_prompt = (\n    \"Answer a question.\"\n    \"Return only the answer, no explanation\"\n    \"Acceptable answers are 'yes', 'no'\"\n    \"Answer this about the following text, is this a happy customer?:\"\n)\n\nreviews.llm.custom(\"review\", prompt = my_prompt)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>custom</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;Yes&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;No&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;No&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### extract {#mall.MallFrame.extract}\n\n``` python\nMallFrame.extract(\n    col,\n    labels='',\n    expand_cols=False,\n    additional='',\n    pred_name='extract',\n)\n```\n\nPull a specific label from the text.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name | Type | Description | Default |\n|----------|----------|------------------------------------------|----------|\n| col | str | The name of the text field to process | *required* |\n| labels | list | A list or a DICT object that defines tells the LLM what to look for and return | `''` |\n| pred_name | str | A character vector with the name of the new column where the prediction will be placed | `'extract'` |\n| additional | str | Inserts this text into the prompt sent to the LLM | `''` |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#e3de581d .cell execution_count=6}\n``` {.python .cell-code}\n# Use 'labels' to let the function know what to extract\nreviews.llm.extract(\"review\", labels = \"product\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>extract</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;tv&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;washing machine&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#12389546 .cell execution_count=7}\n``` {.python .cell-code}\n# Use 'pred_name' to customize the new column's name\nreviews.llm.extract(\"review\", \"product\", pred_name = \"prod\")\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>prod</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;tv&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;washing machine&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#e3178a17 .cell execution_count=8}\n``` {.python .cell-code}\n# Pass a vector to request multiple things, the results will be pipe delimeted\n# in a single column\nreviews.llm.extract(\"review\", [\"product\", \"feelings\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>extract</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;tv | great&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop|disappointment&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;washing machine|frustration&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#92e3ee7b .cell execution_count=9}\n``` {.python .cell-code}\n# Set 'expand_cols' to True to split multiple lables\n# into individual columns\nreviews.llm.extract(\n    col=\"review\",\n    labels=[\"product\", \"feelings\"],\n    expand_cols=True\n    )\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>product</th><th>feelings</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;tv &quot;</td><td>&quot; great&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop&quot;</td><td>&quot;disappointment&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;washing machine&quot;</td><td>&quot;frustration&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#fb5e92d1 .cell execution_count=10}\n``` {.python .cell-code}\n# Set custom names to the resulting columns\nreviews.llm.extract(\n    col=\"review\",\n    labels={\"prod\": \"product\", \"feels\": \"feelings\"},\n    expand_cols=True\n    )\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>prod</th><th>feels</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;tv &quot;</td><td>&quot; great&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop&quot;</td><td>&quot;disappointment&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;washing machine&quot;</td><td>&quot;frustration&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### sentiment {#mall.MallFrame.sentiment}\n\n``` python\nMallFrame.sentiment(\n    col,\n    options=['positive', 'negative', 'neutral'],\n    additional='',\n    pred_name='sentiment',\n)\n```\n\nUse an LLM to run a sentiment analysis\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name | Type | Description | Default |\n|-------------|-------------|----------------------------------|-------------|\n| col | str | The name of the text field to process | *required* |\n| options | list or dict | A list of the sentiment options to use, or a named DICT object | `['positive', 'negative', 'neutral']` |\n| pred_name | str | A character vector with the name of the new column where the prediction will be placed | `'sentiment'` |\n| additional | str | Inserts this text into the prompt sent to the LLM | `''` |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#04182b96 .cell execution_count=11}\n``` {.python .cell-code}\nreviews.llm.sentiment(\"review\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>sentiment</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;positive&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;negative&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;negative&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#528966f8 .cell execution_count=12}\n``` {.python .cell-code}\n# Use 'pred_name' to customize the new column's name\nreviews.llm.sentiment(\"review\", pred_name=\"review_sentiment\")\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>review_sentiment</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;positive&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;negative&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;negative&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#a44ceee5 .cell execution_count=13}\n``` {.python .cell-code}\n# Pass custom sentiment options\nreviews.llm.sentiment(\"review\", [\"positive\", \"negative\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>sentiment</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;positive&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;negative&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;negative&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#5ea5d77d .cell execution_count=14}\n``` {.python .cell-code}\n# Use a DICT object to specify values to return per sentiment\nreviews.llm.sentiment(\"review\", {\"positive\" : 1, \"negative\" : 0})\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>sentiment</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>1</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>0</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### summarize {#mall.MallFrame.summarize}\n\n``` python\nMallFrame.summarize(col, max_words=10, additional='', pred_name='summary')\n```\n\nSummarize the text down to a specific number of words.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name | Type | Description | Default |\n|----------|----------|------------------------------------------|----------|\n| col | str | The name of the text field to process | *required* |\n| max_words | int | Maximum number of words to use for the summary | `10` |\n| pred_name | str | A character vector with the name of the new column where the prediction will be placed | `'summary'` |\n| additional | str | Inserts this text into the prompt sent to the LLM | `''` |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#69eb955e .cell execution_count=15}\n``` {.python .cell-code}\n# Use max_words to set the maximum number of words to use for the summary\nreviews.llm.summarize(\"review\", max_words = 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>summary</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;best tv i&#x27;ve ever used&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop purchase was a mistake&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;hard to adjust to new appliance&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#b137569e .cell execution_count=16}\n``` {.python .cell-code}\n# Use 'pred_name' to customize the new column's name\nreviews.llm.summarize(\"review\", 5, pred_name = \"review_summary\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>review_summary</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;best tv i&#x27;ve ever used&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop purchase was a mistake&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;hard to adjust to new appliance&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### translate {#mall.MallFrame.translate}\n\n``` python\nMallFrame.translate(col, language='', additional='', pred_name='translation')\n```\n\nTranslate text into another language.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name | Type | Description | Default |\n|-----------|-----------|-----------------------------------------|-----------|\n| col | str | The name of the text field to process | *required* |\n| language | str | The target language to translate to. For example 'French'. | `''` |\n| pred_name | str | A character vector with the name of the new column where the prediction will be placed | `'translation'` |\n| additional | str | Inserts this text into the prompt sent to the LLM | `''` |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#aebc3426 .cell execution_count=17}\n``` {.python .cell-code}\nreviews.llm.translate(\"review\", \"spanish\")\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>translation</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;Esta ha sido la mejor televisor que he utilizado hasta ahora. Gran pantalla y sonido.&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;Me arrepiento de haber comprado este portátil. Es demasiado lento y la tecla del espacio es demasiad…</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;No estoy seguro de cómo sentirme con mi nuevo lavadora. El color es excelente, pero es difícil de en…</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#c2f570fe .cell execution_count=18}\n``` {.python .cell-code}\nreviews.llm.translate(\"review\", \"french\")\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>translation</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;Ceci est la meilleure télévision que j&#x27;ai jamais utilisée. Écran et son excellent.&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;Je regrets avoir acheté ce portable. C&#x27;est trop lent et le clavier est trop bruyant.&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;Ne suis pas sûr de savoir comment je me sens à l&#x27;égard de mon nouveau lave-linge. Couleur superbe, m…</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### use {#mall.MallFrame.use}\n\n``` python\nMallFrame.use(backend='', model='', _cache='_mall_cache', **kwargs)\n```\n\nDefine the model, backend, and other options to use to interact with the LLM.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name | Type | Description | Default |\n|---------|---------|---------------------------------------------|---------|\n| backend | str \\| Chat \\| Client | The name of the backend to use, or an Ollama Client object, or a `chatlas` Chat object. At the beginning of the session it defaults to \"ollama\". If passing `\"\"`, it will remain unchanged | `''` |\n| model | str | The name of the model tha the backend should use. At the beginning of the session it defaults to \"llama3.2\". If passing `\"\"`, it will remain unchanged | `''` |\n| \\_cache | str | The path of where to save the cached results. Passing `\"\"` disables the cache | `'_mall_cache'` |\n| \\*\\*kwargs |  | Arguments to pass to the downstream Python call. In this case, the `chat` function in `ollama` | `{}` |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#38254047 .cell execution_count=19}\n``` {.python .cell-code}\n# Additional arguments will be passed 'as-is' to the\n# downstream R function in this example, to ollama::chat()\nreviews.llm.use(\"ollama\", \"llama3.2\", options = dict(seed = 100, temperature = 0.1))\n```\n:::\n\n\n::: {#662becb8 .cell execution_count=20}\n``` {.python .cell-code}\n# During the Python session, you can change any argument\n# individually and it will retain all of previous\n# arguments used\nreviews.llm.use(options = dict(temperature = 0.3))\n```\n:::\n\n\n::: {#26daf441 .cell execution_count=21}\n``` {.python .cell-code}\n# Use _cache to modify the target folder for caching\nreviews.llm.use(_cache = \"_my_cache\")\n```\n:::\n\n\n::: {#c3e13977 .cell execution_count=22}\n``` {.python .cell-code}\n# Leave _cache empty to turn off this functionality\nreviews.llm.use(_cache = \"\")\n```\n:::\n\n\n::: {#e39fbb22 .cell execution_count=23}\n``` {.python .cell-code}\n# Use a `chatlas` object\nfrom chatlas import ChatOpenAI\nchat = ChatOpenAI()\nreviews.llm.use(chat)\n```\n:::\n\n\n### verify {#mall.MallFrame.verify}\n\n``` python\nMallFrame.verify(col, what='', yes_no=[1, 0], additional='', pred_name='verify')\n```\n\nCheck to see if something is true about the text.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name | Type | Description | Default |\n|--------|--------|------------------------------------------------|--------|\n| col | str | The name of the text field to process | *required* |\n| what | str | The statement or question that needs to be verified against the provided text | `''` |\n| yes_no | list | A positional list of size 2, which contains the values to return if true and false. The first position will be used as the 'true' value, and the second as the 'false' value | `[1, 0]` |\n| pred_name | str | A character vector with the name of the new column where the prediction will be placed | `'verify'` |\n| additional | str | Inserts this text into the prompt sent to the LLM | `''` |\n\n#### Examples {.doc-section .doc-section-examples}\n\n::: {#01994253 .cell execution_count=24}\n``` {.python .cell-code}\nreviews.llm.verify(\"review\", \"is the customer happy\")\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>verify</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>1</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>0</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#e8130e8d .cell execution_count=25}\n``` {.python .cell-code}\n# Use 'yes_no' to modify the 'true' and 'false' values to return\nreviews.llm.verify(\"review\", \"is the customer happy\", [\"y\", \"n\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>verify</th></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;y&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;n&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;n&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "MallFrame_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}