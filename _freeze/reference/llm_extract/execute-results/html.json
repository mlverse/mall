{
  "hash": "66b7b107e22f8d4d3c9bbb6a945a8fdc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Extract entities from text\"\nexecute:\n  eval: true\n  freeze: true\n---\n\n\n\n[R/llm-extract.R](https://github.com/mlverse/mall/blob/main/r/R/llm-extract.R)\n\n## llm_extract\n\n## Description\n Use a Large Language Model (LLM) to extract specific entity, or entities, from the provided text \n\n\n## Usage\n```r\n \nllm_extract( \n  .data, \n  col, \n  labels, \n  expand_cols = FALSE, \n  additional_prompt = \"\", \n  pred_name = \".extract\" \n) \n \nllm_vec_extract(x, labels = c(), additional_prompt = \"\", preview = FALSE) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| .data | A `data.frame` or `tbl` object that contains the text to be analyzed |\n| col | The name of the field to analyze, supports `tidy-eval` |\n| labels | A vector with the entities to extract from the text |\n| expand_cols | If multiple `labels` are passed, this is a flag that tells the function to create a new column per item in `labels`. If `labels` is a named vector, this function will use those names as the new column names, if not, the function will use a sanitized version of the content as the name. |\n| additional_prompt | Inserts this text into the prompt sent to the LLM |\n| pred_name | A character vector with the name of the new column where the prediction will be placed |\n| x | A vector that contains the text to be analyzed |\n| preview | It returns the R call that would have been used to run the prediction. It only returns the first record in `x`. Defaults to `FALSE` Applies to vector function only. |\n\n\n\n## Value\n `llm_extract` returns a `data.frame` or `tbl` object. `llm_vec_extract` returns a vector that is the same length as `x`. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\n \n \nlibrary(mall) \n \ndata(\"reviews\") \n \nllm_use(\"ollama\", \"llama3.2\", seed = 100, .silent = TRUE) \n \n# Use 'labels' to let the function know what to extract \nllm_extract(reviews, review, labels = \"product\") \n#> # A tibble: 3 × 2\n#>   review                                        .extract       \n#>   <chr>                                         <chr>          \n#> 1 This has been the best TV I've ever used. Gr… tv             \n#> 2 I regret buying this laptop. It is too slow … laptop         \n#> 3 Not sure how to feel about my new washing ma… washing machine\n \n# Use 'pred_name' to customize the new column's name \nllm_extract(reviews, review, \"product\", pred_name = \"prod\") \n#> # A tibble: 3 × 2\n#>   review                                        prod           \n#>   <chr>                                         <chr>          \n#> 1 This has been the best TV I've ever used. Gr… tv             \n#> 2 I regret buying this laptop. It is too slow … laptop         \n#> 3 Not sure how to feel about my new washing ma… washing machine\n \n# Pass a vector to request multiple things, the results will be pipe delimeted \n# in a single column \nllm_extract(reviews, review, c(\"product\", \"feelings\")) \n#> # A tibble: 3 × 2\n#>   review                                        .extract                   \n#>   <chr>                                         <chr>                      \n#> 1 This has been the best TV I've ever used. Gr… tv | great                 \n#> 2 I regret buying this laptop. It is too slow … laptop|frustration         \n#> 3 Not sure how to feel about my new washing ma… washing machine | confusion\n \n# To get multiple columns, use 'expand_cols' \nllm_extract(reviews, review, c(\"product\", \"feelings\"), expand_cols = TRUE) \n#> # A tibble: 3 × 3\n#>   review                                        product            feelings     \n#>   <chr>                                         <chr>              <chr>        \n#> 1 This has been the best TV I've ever used. Gr… \"tv \"              \" great\"     \n#> 2 I regret buying this laptop. It is too slow … \"laptop\"           \"frustration\"\n#> 3 Not sure how to feel about my new washing ma… \"washing machine \" \" confusion\"\n \n# Pass a named vector to set the resulting column names \nllm_extract( \n  .data = reviews, \n  col = review, \n  labels = c(prod = \"product\", feels = \"feelings\"), \n  expand_cols = TRUE \n) \n#> # A tibble: 3 × 3\n#>   review                                        prod               feels        \n#>   <chr>                                         <chr>              <chr>        \n#> 1 This has been the best TV I've ever used. Gr… \"tv \"              \" great\"     \n#> 2 I regret buying this laptop. It is too slow … \"laptop\"           \"frustration\"\n#> 3 Not sure how to feel about my new washing ma… \"washing machine \" \" confusion\"\n \n# For character vectors, instead of a data frame, use this function \nllm_vec_extract(\"bob smith, 123 3rd street\", c(\"name\", \"address\")) \n#> [1] \"bob smith | 123 3rd street\"\n \n# To preview the first call that will be made to the downstream R function \nllm_vec_extract( \n  \"bob smith, 123 3rd street\", \n  c(\"name\", \"address\"), \n  preview = TRUE \n) \n#> ollamar::chat(messages = list(list(role = \"user\", content = \"You are a helpful text extraction engine. Extract the name, address being referred to on the text. I expect 2 items exactly. No capitalization. No explanations. Return the response exclusively in a pipe separated list, and no headers.   The answer is based on the following text:\\nbob smith, 123 3rd street\")), \n#>     output = \"text\", model = \"llama3.2\", seed = 100)\n```\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}