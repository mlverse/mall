# MallFrame { #mall.MallFrame }

`MallFrame(self, df)`

Extension to Polars that add ability to use
an LLM to run batch predictions over a data frame

We will start by loading the needed libraries, and
set up the data frame that will be used in the
examples:

```{python}
#| output: false
import mall
import polars as pl
pl.Config(fmt_str_lengths=100)
pl.Config.set_tbl_hide_dataframe_shape(True)
pl.Config.set_tbl_hide_column_data_types(True)
data = mall.MallData
reviews = data.reviews
reviews.llm.use(options = dict(seed = 100))
```

## Methods

| Name | Description |
| --- | --- |
| [classify](#mall.MallFrame.classify) | Classify text into specific categories. |
| [custom](#mall.MallFrame.custom) | Provide the full prompt that the LLM will process. |
| [extract](#mall.MallFrame.extract) | Pull a specific label from the text. |
| [sentiment](#mall.MallFrame.sentiment) | Use an LLM to run a sentiment analysis |
| [summarize](#mall.MallFrame.summarize) | Summarize the text down to a specific number of words. |
| [translate](#mall.MallFrame.translate) | Translate text into another language. |
| [use](#mall.MallFrame.use) | Define the model, backend, and other options to use to |
| [verify](#mall.MallFrame.verify) | Check to see if something is true about the text. |

### classify { #mall.MallFrame.classify }

`MallFrame.classify(col, labels='', additional='', pred_name='classify')`

Classify text into specific categories.

#### Parameters

| Name         | Type   | Description                                                                                                             | Default      |
|--------------|--------|-------------------------------------------------------------------------------------------------------------------------|--------------|
| `col`        | str    | The name of the text field to process                                                                                   | _required_   |
| `labels`     | list   | A list or a DICT object that defines the categories to classify the text as. It will return one of the provided labels. | `''`         |
| `pred_name`  | str    | A character vector with the name of the new column where the prediction will be placed                                  | `'classify'` |
| `additional` | str    | Inserts this text into the prompt sent to the LLM                                                                       | `''`         |

#### Examples

```{python}
reviews.llm.classify("review", ["appliance", "computer"])
```

```{python}
# Use 'pred_name' to customize the new column's name
reviews.llm.classify("review", ["appliance", "computer"], pred_name="prod_type")
```

```{python}
#Pass a DICT to set custom values for each classification
reviews.llm.classify("review", {"appliance" : "1", "computer" : "2"})
```

### custom { #mall.MallFrame.custom }

`MallFrame.custom(col, prompt='', valid_resps='', pred_name='custom')`

Provide the full prompt that the LLM will process.

#### Parameters

| Name        | Type   | Description                                                                            | Default    |
|-------------|--------|----------------------------------------------------------------------------------------|------------|
| `col`       | str    | The name of the text field to process                                                  | _required_ |
| `prompt`    | str    | The prompt to send to the LLM along with the `col`                                     | `''`       |
| `pred_name` | str    | A character vector with the name of the new column where the prediction will be placed | `'custom'` |

#### Examples

```{python}
my_prompt = (
    "Answer a question."
    "Return only the answer, no explanation"
    "Acceptable answers are 'yes', 'no'"
    "Answer this about the following text, is this a happy customer?:"
)

reviews.llm.custom("review", prompt = my_prompt)
```

### extract { #mall.MallFrame.extract }

`MallFrame.extract(col, labels='', expand_cols=False, additional='', pred_name='extract')`

Pull a specific label from the text.

#### Parameters

| Name         | Type   | Description                                                                            | Default     |
|--------------|--------|----------------------------------------------------------------------------------------|-------------|
| `col`        | str    | The name of the text field to process                                                  | _required_  |
| `labels`     | list   | A list or a DICT object that defines tells the LLM what to look for and return         | `''`        |
| `pred_name`  | str    | A character vector with the name of the new column where the prediction will be placed | `'extract'` |
| `additional` | str    | Inserts this text into the prompt sent to the LLM                                      | `''`        |

#### Examples

```{python}
# Use 'labels' to let the function know what to extract
reviews.llm.extract("review", labels = "product")
```

```{python}
# Use 'pred_name' to customize the new column's name
reviews.llm.extract("review", "product", pred_name = "prod")
```

```{python}
# Pass a vector to request multiple things, the results will be pipe delimeted
# in a single column
reviews.llm.extract("review", ["product", "feelings"])
```

```{python}
# Set 'expand_cols' to True to split multiple lables
# into individual columns
reviews.llm.extract(
    col="review",
    labels=["product", "feelings"],
    expand_cols=True
    )
```

```{python}
# Set custom names to the resulting columns
reviews.llm.extract(
    col="review",
    labels={"prod": "product", "feels": "feelings"},
    expand_cols=True
    )
```

### sentiment { #mall.MallFrame.sentiment }

`MallFrame.sentiment(col, options=['positive', 'negative', 'neutral'], additional='', pred_name='sentiment')`

Use an LLM to run a sentiment analysis

#### Parameters

| Name         | Type         | Description                                                                            | Default                               |
|--------------|--------------|----------------------------------------------------------------------------------------|---------------------------------------|
| `col`        | str          | The name of the text field to process                                                  | _required_                            |
| `options`    | list or dict | A list of the sentiment options to use, or a named DICT object                         | `['positive', 'negative', 'neutral']` |
| `pred_name`  | str          | A character vector with the name of the new column where the prediction will be placed | `'sentiment'`                         |
| `additional` | str          | Inserts this text into the prompt sent to the LLM                                      | `''`                                  |

#### Examples

```{python}
reviews.llm.sentiment("review")
```

```{python}
# Use 'pred_name' to customize the new column's name
reviews.llm.sentiment("review", pred_name="review_sentiment")
```

```{python}
# Pass custom sentiment options
reviews.llm.sentiment("review", ["positive", "negative"])
```

```{python}
# Use a DICT object to specify values to return per sentiment
reviews.llm.sentiment("review", {"positive" : 1, "negative" : 0})
```

### summarize { #mall.MallFrame.summarize }

`MallFrame.summarize(col, max_words=10, additional='', pred_name='summary')`

Summarize the text down to a specific number of words.

#### Parameters

| Name         | Type   | Description                                                                            | Default     |
|--------------|--------|----------------------------------------------------------------------------------------|-------------|
| `col`        | str    | The name of the text field to process                                                  | _required_  |
| `max_words`  | int    | Maximum number of words to use for the summary                                         | `10`        |
| `pred_name`  | str    | A character vector with the name of the new column where the prediction will be placed | `'summary'` |
| `additional` | str    | Inserts this text into the prompt sent to the LLM                                      | `''`        |

#### Examples

```{python}
# Use max_words to set the maximum number of words to use for the summary
reviews.llm.summarize("review", max_words = 5)
```

```{python}
# Use 'pred_name' to customize the new column's name
reviews.llm.summarize("review", 5, pred_name = "review_summary")
```

### translate { #mall.MallFrame.translate }

`MallFrame.translate(col, language='', additional='', pred_name='translation')`

Translate text into another language.

#### Parameters

| Name         | Type   | Description                                                                            | Default         |
|--------------|--------|----------------------------------------------------------------------------------------|-----------------|
| `col`        | str    | The name of the text field to process                                                  | _required_      |
| `language`   | str    | The target language to translate to. For example 'French'.                             | `''`            |
| `pred_name`  | str    | A character vector with the name of the new column where the prediction will be placed | `'translation'` |
| `additional` | str    | Inserts this text into the prompt sent to the LLM                                      | `''`            |

#### Examples

```{python}
reviews.llm.translate("review", "spanish")
```

```{python}
reviews.llm.translate("review", "french")
```

### use { #mall.MallFrame.use }

`MallFrame.use(backend='', model='', _cache='_mall_cache', **kwargs)`

Define the model, backend, and other options to use to
interact with the LLM.

#### Parameters

| Name       | Type   | Description                                                                                                                                                      | Default         |
|------------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|
| `backend`  |        | The name of the backend to use, or a `chatlas` chat object.  At the beginning of the session it defaults to "ollama".  If passing `""`, it will remain unchanged | `''`            |
| `model`    | str    | The name of the model tha the backend should use. At the beginning of the session it defaults to "llama3.2". If passing `""`, it will remain unchanged           | `''`            |
| `_cache`   | str    | The path of where to save the cached results. Passing `""` disables the cache                                                                                    | `'_mall_cache'` |
| `**kwargs` |        | Arguments to pass to the downstream Python call. In this case, the `chat` function in `ollama`                                                                   | `{}`            |

#### Examples

```{python}
# Additional arguments will be passed 'as-is' to the
# downstream R function in this example, to ollama::chat()
reviews.llm.use("ollama", "llama3.2", options = dict(seed = 100, temperature = 0.1))
```

```{python}
# During the Python session, you can change any argument
# individually and it will retain all of previous
# arguments used
reviews.llm.use(options = dict(temperature = 0.3))
```

```{python}
# Use _cache to modify the target folder for caching
reviews.llm.use(_cache = "_my_cache")
```

```{python}
# Leave _cache empty to turn off this functionality
reviews.llm.use(_cache = "")
```

### verify { #mall.MallFrame.verify }

`MallFrame.verify(col, what='', yes_no=[1, 0], additional='', pred_name='verify')`

Check to see if something is true about the text.

#### Parameters

| Name         | Type   | Description                                                                                                                                                                  | Default    |
|--------------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| `col`        | str    | The name of the text field to process                                                                                                                                        | _required_ |
| `what`       | str    | The statement or question that needs to be verified against the provided text                                                                                                | `''`       |
| `yes_no`     | list   | A positional list of size 2, which contains the values to return if true and false. The first position will be used as the 'true' value, and the second as the 'false' value | `[1, 0]`   |
| `pred_name`  | str    | A character vector with the name of the new column where the prediction will be placed                                                                                       | `'verify'` |
| `additional` | str    | Inserts this text into the prompt sent to the LLM                                                                                                                            | `''`       |

#### Examples

```{python}
reviews.llm.verify("review", "is the customer happy")
```

```{python}
# Use 'yes_no' to modify the 'true' and 'false' values to return
reviews.llm.verify("review", "is the customer happy", ["y", "n"])
```