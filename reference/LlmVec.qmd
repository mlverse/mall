# LlmVec { #mall.LlmVec }

`LlmVec(self, backend='', model='', _cache='_mall_cache', **kwargs)`

Class that adds ability to use an LLM to run batch predictions

```{python}
from chatlas import ChatOllama
from mall import LlmVec

chat = ChatOllama(model = "llama3.2")

llm = LlmVec(chat)    
```

## Methods

| Name | Description |
| --- | --- |
| [classify](#mall.LlmVec.classify) | Classify text into specific categories. |
| [custom](#mall.LlmVec.custom) | Provide the full prompt that the LLM will process. |
| [extract](#mall.LlmVec.extract) | Pull a specific label from the text. |
| [sentiment](#mall.LlmVec.sentiment) | Use an LLM to run a sentiment analysis |
| [summarize](#mall.LlmVec.summarize) | Summarize the text down to a specific number of words. |
| [translate](#mall.LlmVec.translate) | Translate text into another language. |
| [verify](#mall.LlmVec.verify) | Check to see if something is true about the text. |

### classify { #mall.LlmVec.classify }

`LlmVec.classify(x, labels='', additional='')`

Classify text into specific categories.

#### Parameters

| Name         | Type   | Description                                                                                                             | Default    |
|--------------|--------|-------------------------------------------------------------------------------------------------------------------------|------------|
| `x`          | list   | A list of texts                                                                                                         | _required_ |
| `labels`     | list   | A list or a DICT object that defines the categories to classify the text as. It will return one of the provided labels. | `''`       |
| `additional` | str    | Inserts this text into the prompt sent to the LLM                                                                       | `''`       |

#### Examples

```{python}
llm.classify(['this is important!', 'there is no rush'], ['urgent', 'not urgent'])
```

### custom { #mall.LlmVec.custom }

`LlmVec.custom(x, prompt='', valid_resps='')`

Provide the full prompt that the LLM will process.

#### Parameters

| Name     | Type   | Description                                        | Default    |
|----------|--------|----------------------------------------------------|------------|
| `x`      | list   | A list of texts                                    | _required_ |
| `prompt` | str    | The prompt to send to the LLM along with the `col` | `''`       |

### extract { #mall.LlmVec.extract }

`LlmVec.extract(x, labels='', additional='')`

Pull a specific label from the text.

#### Parameters

| Name         | Type   | Description                                                                    | Default    |
|--------------|--------|--------------------------------------------------------------------------------|------------|
| `x`          | list   | A list of texts                                                                | _required_ |
| `labels`     | list   | A list or a DICT object that defines tells the LLM what to look for and return | `''`       |
| `additional` | str    | Inserts this text into the prompt sent to the LLM                              | `''`       |

#### Examples

```{python}
llm.extract(['bob smith, 123 3rd street'], labels=['name', 'address'])
```

### sentiment { #mall.LlmVec.sentiment }

`LlmVec.sentiment(x, options=['positive', 'negative', 'neutral'], additional='')`

Use an LLM to run a sentiment analysis

#### Parameters

| Name         | Type         | Description                                                    | Default                               |
|--------------|--------------|----------------------------------------------------------------|---------------------------------------|
| `x`          | list         | A list of texts                                                | _required_                            |
| `options`    | list or dict | A list of the sentiment options to use, or a named DICT object | `['positive', 'negative', 'neutral']` |
| `additional` | str          | Inserts this text into the prompt sent to the LLM              | `''`                                  |

#### Examples

```{python}
llm.sentiment(['I am happy', 'I am sad'])
```

### summarize { #mall.LlmVec.summarize }

`LlmVec.summarize(x, max_words=10, additional='')`

Summarize the text down to a specific number of words.

#### Parameters

| Name         | Type   | Description                                       | Default    |
|--------------|--------|---------------------------------------------------|------------|
| `x`          | list   | A list of texts                                   | _required_ |
| `max_words`  | int    | Maximum number of words to use for the summary    | `10`       |
| `additional` | str    | Inserts this text into the prompt sent to the LLM | `''`       |

#### Examples

```{python}
llm.summarize(['This has been the best TV Ive ever used. Great screen, and sound.'], max_words = 5)
```

### translate { #mall.LlmVec.translate }

`LlmVec.translate(x, language='', additional='')`

Translate text into another language.

#### Parameters

| Name         | Type   | Description                                                | Default    |
|--------------|--------|------------------------------------------------------------|------------|
| `x`          | list   | A list of texts                                            | _required_ |
| `language`   | str    | The target language to translate to. For example 'French'. | `''`       |
| `additional` | str    | Inserts this text into the prompt sent to the LLM          | `''`       |

#### Examples

```{python}
llm.translate(['This has been the best TV Ive ever used. Great screen, and sound.'], language = 'spanish')
```

### verify { #mall.LlmVec.verify }

`LlmVec.verify(x, what='', yes_no=[1, 0], additional='')`

Check to see if something is true about the text.

#### Parameters

| Name         | Type   | Description                                                                                                                                                                  | Default    |
|--------------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| `x`          | list   | A list of texts                                                                                                                                                              | _required_ |
| `what`       | str    | The statement or question that needs to be verified against the provided text                                                                                                | `''`       |
| `yes_no`     | list   | A positional list of size 2, which contains the values to return if true and false. The first position will be used as the 'true' value, and the second as the 'false' value | `[1, 0]`   |
| `additional` | str    | Inserts this text into the prompt sent to the LLM                                                                                                                            | `''`       |